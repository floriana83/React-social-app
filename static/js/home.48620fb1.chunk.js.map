{"version":3,"sources":["libs/http.js","components/Modal/index.jsx","components/Modal/Modal.module.scss","components/FriendPreview/index.jsx","components/FriendPreview/FriendPreview.module.scss","components/MessagePreview/MessagePreview.module.scss","components/Post/Post.module.scss","pages/Home/Home.module.scss","components/DataSet/dataSet.js","components/MessagePreview/index.jsx","components/Post/index.jsx","pages/Home/index.jsx"],"names":["BASE_URL","http","resource","fetch","then","response","json","httpPOST","data","method","headers","body","JSON","stringify","httpDELETE","Modal","bgColor","text","className","styles","style","background","module","exports","FriendPreview","props","name","photo","friend","src","alt","DataSet","formatRelative","Date","relative","addSuffix","locale","it","MessagePreview","date","sender","message","Post","author","useState","isModalVisible","setModalVisibile","post","onClick","id","setTimeout","window","location","href","deleteBtn","friends","messages","posts","Home","friendsPreview","setFriendsPreview","allPosts","setAllPosts","messagesPreview","setMessagesPreview","useEffect","reverse","home","grid","map","index","to","createPostBtn"],"mappings":"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","file":"static/js/home.48620fb1.chunk.js","sourcesContent":["const BASE_URL = \"https://edgemony-backend.herokuapp.com\";\n\nconst http = (resource) =>\n  fetch(BASE_URL + resource).then((response) => response.json());\n\nconst httpPOST = (resource, data) =>\n  fetch(BASE_URL + resource, {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  }).then((response) => response.json());\n\nconst httpDELETE = (resource) =>\n  fetch(BASE_URL + resource, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-type\": \"application/json\",\n    },\n  }).then((response) => response.json());\n\n// Popola la lista degli amici, in base alla lista friendsNames\nconst fillFriendsList = (friendsNames) => {\n  let value = 0;\n  for (value in [...Array(friendsNames.length).keys()]) {\n    httpPOST(\"/friends\", {\n      name: friendsNames[value],\n      photo: `https://randomuser.me/api/portraits/men/${value}.jpg`,\n    });\n\n    setTimeout(() => {}, 100);\n  }\n};\n\nexport { http, httpPOST, httpDELETE, fillFriendsList };\n","// import styles from \"./Modal.module.scss\";\n\n// const Modal = props => {\n//     let result = \"\";\n\n//     if (props.value === \"red\"){\n//         result = \"Post Deleted\";\n//     } if (props.value === \"cornflowerblue\"){\n//         result = \"Post Added\"\n//     }\n//     return (\n//         <div className={styles.modal} style={{background: props.value}}>\n//             <p>{result}</p>\n//         </div>\n//     )\n// }\n\n\n// export default Modal;\n\nimport styles from \"./Modal.module.scss\";\n\nconst Modal = ({ bgColor, text }) => {\n  return (\n    <div className={styles.Modal} style={{ background: `${bgColor}` }}>\n      <p>{text}</p>\n    </div>\n  );\n};\n\nexport default Modal;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__32mLz\"};","import styles from \"./FriendPreview.module.scss\";\n\nconst FriendPreview = (props) => {\n    const data = props.data || {\n        name: 'Friend', \n        photo:\"http://ranomuser.me/api/portraits/women/59.jpg\"   \n    };                      // <= DATI DI PLACEHOLDER\n    return (\n        <div className={styles.friend}>\n            <img src={data.photo} alt={data.name} />\n            <p>{data.name}</p>\n        </div>\n    );\n};\n\nexport { FriendPreview };","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend\":\"FriendPreview_friend__3Gjby\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"MessagePreview_message__3j9dl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3hqZB\",\"deleteBtn\":\"Post_deleteBtn__1bIB2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"Home_home__1JXvv\",\"grid\":\"Home_grid__sUtIT\",\"createPostBtn\":\"Home_createPostBtn__1BGTQ\",\"friend\":\"Home_friend__eOEhP\"};","import { formatRelative } from 'date-fns';\nimport {it} from 'date-fns/locale'\n\nconst DataSet = (props) => {\n   \n        return (\n            <>\n                {formatRelative(new Date(props.relative), \n                new Date(), { addSuffix: true, locale: it })}\n            </>\n        );\n    };\n\nexport {DataSet}","import styles from \"./MessagePreview.module.scss\";\nimport {DataSet} from '../DataSet/dataSet.js'\n\nconst MessagePreview = (props) => {\n    const data = props.data || {\n        text: 'lorem ipsum', date: new Date(), sender: 'user',\n    };\n\n\n    return (\n        <div className={styles.message}>\n            <h5>{data.sender}</h5>\n            <p>\n            <small> <DataSet relative={data.date}/> </small>\n\n            </p>\n            <p>{data.text}</p>\n        </div>\n    );\n};\n\nexport { MessagePreview };","\nimport styles from './Post.module.scss';\nimport {DataSet} from '../DataSet/dataSet.js'\nimport {httpDELETE} from \"../../libs/http\"\nimport Modal from '../Modal'\nimport {useState} from \"react\";\n\nconst Post = (props) => {\n    const data = props.data || {\n        author: 'user',\n        text: 'text',\n        date: new Date(),\n        photo: 'https://images.unsplash.com/photo-1511149672083-577ee63de3dc?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1024&q=80'\n    };\n// const [isModalShown, setModalShown] = useState(false);\n    // const handleDeletePost = () => {\n    //     httpDELETE(`/posts/${props.data.id}`).then(() => {});\n    //     // alert(`Post by ${props.data.author} was deleted`);\n    //     setModalShown(!isModalShown);\n    //     window.location.href = \"/\";\n    //   };\n//     return (\n//         <article className={styles.post}>\n//             <button onClick={handleDeletePost} className={styles.deleteBtn}>X</button>\n//             {isModalShown && <Modal value=\"red\"/>}\n//             <h3>{data.author}</h3>\n//             <p>\n//                 {/* <small><DataSet relative={data.date}/></small> */}\n//                 <small>{data.date ? <DataSet relative={data.date}/> : <></>}</small>\n//             </p>\n        \n//             <p>{data.text}</p>\n\n//             {data.photo ? <img src={data.photo} alt={data.author} /> : <></>}\n//         </article>\n//     );\n// };\n\nconst handleDeletePost = () => {\n    httpDELETE(`/posts/${props.data.id}`).then(() => {});\n    setModalVisibile(true);\n\n    setTimeout(() => {\n      setModalVisibile(false);\n      window.location.href = \"/\";\n    }, 3000);\n  };\nconst [isModalVisible, setModalVisibile] = useState(false);\nreturn (\n    <article className={styles.post}>\n      {isModalVisible && (\n        <Modal bgColor=\"lightcoral\" text=\"Il post è stato rimosso\" />\n      )}\n      <button onClick={handleDeletePost} className={styles.deleteBtn}>\n        X\n      </button>\n\n      <h3>{data.author}</h3>\n      <p>\n        {/* <small><DataSet relative={data.date}/></small> */}\n                 <small>{data.date ? <DataSet relative={data.date}/> : <></>}</small>\n      </p>\n      <p>{data.text}</p>\n\n      {data.photo ? <img src={data.photo} alt={data.author} /> : <></>}\n\n      {/*\n      Per gestire condizioni più complesse posso richiamare una funzione \n      \n      hasImage(data.photo) \n      */}\n    </article>\n  );\n};\n\nexport { Post };","import { useState, useEffect } from \"react\";\nimport { FriendPreview } from \"../../components/FriendPreview\";\nimport { MessagePreview } from \"../../components/MessagePreview\";\nimport { Post } from \"../../components/Post\";\nimport { http } from \"./../../libs/http\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./Home.module.scss\";\n\nconst friends = [];\n\nconst messages = [];\n\nconst posts = [];\n\nconst Home = () => {\n  const [friendsPreview, setFriendsPreview] = useState(friends);\n  const [allPosts, setAllPosts] = useState(posts);\n  const [messagesPreview, setMessagesPreview] = useState(messages);\n\n  // GETTER -> const friendPreview = [];\n  // SETTER -> friendPreview = [...]\n\n  // Esegui del codice quando il componente è inizializzato (montato in pagina)\n  // componentDidMount() --> simile a \"DOMContentLoaded\" ma solo per il componente\n  useEffect(() => {\n    // fetch(\"https://edgemony-backend.herokuapp.com/friends?_limit=4\")\n    //   .then((response) => response.json())\n    //   .then((data) => setFriendsPreview(data));\n\n    http(\"/friends?_limit=4\").then((data) => setFriendsPreview(data));\n    http(\"/messages?_limit=4\").then((data) => setMessagesPreview(data));\n    http(\"/posts\").then((data) => setAllPosts(data.reverse()));\n\n    // Promise.all([\n    //   http(\"/friends?_limit=4\"),\n    //   http(\"/messages?_limit=4\"),\n    //   http(\"/posts\")\n    // ]).then((data) => console.log(data[0]))\n  }, []);\n\n  return (\n    <section className={styles.home}>\n      <h3>Bevenuto utente</h3>\n      <div className={styles.grid}>\n        <aside>\n          {friendsPreview.map((friend, index) => (\n            <FriendPreview key={index} data={friend} />\n          ))}\n        </aside>\n        <main>\n          <Link to=\"/new-post\">\n            <button className={styles.createPostBtn}>\n              + Create a new post!\n            </button>\n          </Link>\n          {allPosts.map((post, index) => (\n            <Post key={index} data={post} />\n          ))}\n        </main>\n        <aside>\n          {messagesPreview.map((message, index) => (\n            <MessagePreview key={index} data={message} />\n          ))}\n        </aside>\n      </div>\n    </section>\n  );\n};\n\nexport default Home;\n"],"sourceRoot":""}